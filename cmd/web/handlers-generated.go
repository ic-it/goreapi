// Code generated by goreapi. DO NOT EDIT.
//go:build !gore
// +build !gore

package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
)

type User struct {
	Id       int    `json:"id,omitempty"`
	Name     string `json:"name"`
	Age      int    `json:"age"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

var ()

func goreapiCreateUserHandler(w http.ResponseWriter, r *http.Request) {
	handler := func(id int, user *User) int {
		fmt.Printf("Creating user: %s\n", user.Name)
		return id
	}
	var id int
	{
		var err error
		data := r.PathValue("id")
		id, err = strconv.Atoi(data)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	var user User
	{
		if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	result := handler(id, &user)
	if err := json.NewEncoder(w).Encode(result); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}
func goreapiCreateUserHandler2(w http.ResponseWriter, r *http.Request) {
	handler := func(id int, user *User) int {
		fmt.Printf("Creating user: %s\n", user.Name)
		return id
	}
	var id int
	{
		var err error
		data := r.URL.Query().Get("id")
		id, err = strconv.Atoi(data)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	var user User
	{
		var err error
		data := r.URL.Query().Get("user")
		err = json.Unmarshal([]byte(data), &user)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	result := handler(id, &user)
	if err := json.NewEncoder(w).Encode(result); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}
func goreapiGetUserHandler(w http.ResponseWriter, r *http.Request) {
	handler := func(id int) *User {
		return &User{Id: id, Name: "John", Age: 30, Email: "test@mail.com", Password: "password"}
	}
	var id int
	{
		var err error
		data := r.PathValue("id")
		id, err = strconv.Atoi(data)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	result := handler(id)
	if err := json.NewEncoder(w).Encode(result); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}
func goreapiGetUserHandler2(w http.ResponseWriter, r *http.Request) {
	handler := func(id int) *User {
		return &User{Id: id, Name: "John", Age: 30, Email: "asdasd@asdasd.com", Password: "password"}
	}
	var id int
	{
		var err error
		data := r.URL.Query().Get("id")
		id, err = strconv.Atoi(data)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}
	result := handler(id)
	if err := json.NewEncoder(w).Encode(result); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

var CreateUserHandler = http.HandlerFunc(goreapiCreateUserHandler)
var CreateUserHandler2 = http.HandlerFunc(goreapiCreateUserHandler2)
var GetUserHandler = http.HandlerFunc(goreapiGetUserHandler)
var GetUserHandler2 = http.HandlerFunc(goreapiGetUserHandler2)
